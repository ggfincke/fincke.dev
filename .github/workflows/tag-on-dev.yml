name: Tag & prerelease on dev push/merge
on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
    types: [ closed ]

permissions:
  contents: write

jobs:
  prerelease-dev:
    runs-on: ubuntu-latest
    # Run on direct pushes to dev OR when PR to dev is merged (not just closed)
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    steps:
      - name: Checkout full history
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # For PR merges, checkout the merge commit; for pushes, use default
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.merge_commit_sha || github.sha }}

      - name: Get version from package.json
        id: version
        run: |
          # Get version directly from package.json (already updated by pre-commit hook)
          package_version=$(node -p "require('./package.json').version")
          if [ -z "$package_version" ]; then
            echo "No version found in package.json"
            exit 1
          fi
          
          # Create tag format (replace dots with dashes for prerelease part)
          tag="v${package_version}"
          # Convert package.json format (1.16.2-prerelease.20250827) to tag format (v1.16.2-prerelease-20250827)
          tag=$(echo "$tag" | sed 's/-prerelease\./-prerelease-/')
          
          echo "package_version=$package_version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "name=$tag" >> $GITHUB_OUTPUT

      - name: Extract release notes from CHANGELOG.md
        id: notes
        run: |
          # Extract the first version section from CHANGELOG.md
          awk '
          /^## \[[0-9]+\.[0-9]+\.[0-9]+(-prerelease\.[0-9]+)?\]/ {
            if (found) exit
            found = 1
            print $0
            next
          }
          found && /^## \[/ { exit }
          found && /^---$/ { exit }
          found { print $0 }
          ' CHANGELOG.md > release_notes.txt
          
          # Convert to proper format for GitHub
          {
            echo "notes<<EOF"
            cat release_notes.txt
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create and push prerelease tag
        run: |
          git tag "${{ steps.version.outputs.tag }}"
          git push origin "${{ steps.version.outputs.tag }}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create GitHub prerelease (not latest)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.name }}
          body: ${{ steps.notes.outputs.notes }}
          prerelease: true
          make_latest: false
          generate_release_notes: false
