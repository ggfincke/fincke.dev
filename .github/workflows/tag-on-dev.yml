name: Tag & prerelease on dev push/merge
on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
    types: [ closed ]

permissions:
  contents: write

jobs:
  prerelease-dev:
    runs-on: ubuntu-latest
    # Run on direct pushes to dev OR when PR to dev is merged (not just closed)
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # For PR merges, checkout the merge commit; for pushes, use default
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.merge_commit_sha || github.sha }}

      - name: Check if major/minor version changed
        id: version_check
        run: |
          # Get current version from package.json
          package_version=$(node -p "require('./package.json').version")
          if [ -z "$package_version" ]; then
            echo "No version found in package.json"
            exit 1
          fi
          
          # Get the base version (without prerelease suffix)
          base_version=$(echo "$package_version" | sed -E 's/(-prerelease\.[0-9]+)?$//')
          
          # Get the last tag to compare versions
          last_tag=$(git tag --list 'v*' | sort -V | tail -n1 | sed 's/^v//' | sed -E 's/(-prerelease-[0-9]+)?$//')
          if [ -z "$last_tag" ]; then
            last_tag="1.0.0"
          fi
          
          # Extract major.minor from both versions
          current_major_minor=$(echo "$base_version" | cut -d. -f1,2)
          last_major_minor=$(echo "$last_tag" | cut -d. -f1,2)
          
          # Check if major or minor version changed
          if [ "$current_major_minor" != "$last_major_minor" ]; then
            echo "Major or minor version changed ($last_major_minor â†’ $current_major_minor)"
            echo "Skipping tag creation - this will be handled in PR to main"
            echo "skip_tagging=true" >> $GITHUB_OUTPUT
          else
            echo "Only patch version changed - proceeding with prerelease tag"
            echo "skip_tagging=false" >> $GITHUB_OUTPUT
          fi
          
          # Create tag format (replace dots with dashes for prerelease part)
          tag="v${package_version}"
          # Convert package.json format (1.16.2-prerelease.20250827) to tag format (v1.16.2-prerelease-20250827)
          tag=$(echo "$tag" | sed 's/-prerelease\./-prerelease-/')
          
          echo "package_version=$package_version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "name=$tag" >> $GITHUB_OUTPUT

      - name: Extract release notes from CHANGELOG.md
        id: notes
        if: steps.version_check.outputs.skip_tagging == 'false'
        run: |
          # Extract the first version section from CHANGELOG.md
          awk '
          /^## \[[0-9]+\.[0-9]+\.[0-9]+(-prerelease\.[0-9]+)?\]/ {
            if (found) exit
            found = 1
            print $0
            next
          }
          found && /^## \[/ { exit }
          found && /^---$/ { exit }
          found { print $0 }
          ' CHANGELOG.md > release_notes.txt
          
          # Convert to proper format for GitHub
          {
            echo "notes<<EOF"
            cat release_notes.txt
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create and push prerelease tag
        if: steps.version_check.outputs.skip_tagging == 'false'
        run: |
          git tag "${{ steps.version_check.outputs.tag }}"
          git push origin "${{ steps.version_check.outputs.tag }}"

      - name: Setup Node.js
        if: steps.version_check.outputs.skip_tagging == 'false'
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Create GitHub prerelease (not latest)
        if: steps.version_check.outputs.skip_tagging == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version_check.outputs.tag }}
          name: ${{ steps.version_check.outputs.name }}
          body: ${{ steps.notes.outputs.notes }}
          prerelease: true
          make_latest: false
          generate_release_notes: false
